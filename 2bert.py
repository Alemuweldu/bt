# -*- coding: utf-8 -*-
"""2BERT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPApQxvE79iVwLlZ4vLsTWo2SoGButMs

## <a id="1">***Importing Dependencies***</a>
"""



# Commented out IPython magic to ensure Python compatibility.
# %%capture
# ! pip install pytorch-lightning --quiet
# ! pip install nlpaug --quiet
# ! pip install gdown==3.13.0

# Commented out IPython magic to ensure Python compatibility.
#basic imports
#
# %matplotlib inline

#NLP imports
import re
import nltk
import string
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')
from nltk.corpus import stopwords

#Classification imports
from sklearn import metrics
from sklearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTEN
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.model_selection import GridSearchCV, cross_val_score
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer,TfidfTransformer
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score, roc_auc_score, auc, roc_curve, precision_recall_curve

from transformers import BertClassifier
#from transformers.modeling_bert import BertModel, BertForMaskedLM
from transformers.models.bert.modeling_bert import BertModel,BertForMaskedLM

#Models

from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.svm import SVC, LinearSVC
# from catboost import CatBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier,LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import MultinomialNB, BernoulliNB,GaussianNB
from sklearn.ensemble import RandomForestClassifier, BaggingClassifier,GradientBoostingClassifier,AdaBoostClassifier,BaggingClassifier

## for word embedding
import gensim
import gensim.downloader as gensim_api

# ## for deep learning
# import keras
# import tensorflow
# from keras.models import Sequential
# from tensorflow.keras import backend as K
# from tensorflow.keras.layers.embeddings import Embedding
# from keras.preprocessing.text import Tokenizer
# from tensorflow.keras.utils import to_categorical
# from tensorflow.keras.optimizers import Adam, RMSprop
# from keras.preprocessing.sequence import pad_sequences
# from tensorflow.keras import models, layers, preprocessing as kprocessing
# from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping
# from keras.layers import Dense, Flatten, LSTM, Bidirectional,Conv1D, MaxPooling1D, Dropout, Activation,GlobalMaxPool1D,BatchNormalization

import torch
import torchtext
#import pytorch_lightning as pl
import pandas as pd
from torch.utils.data import Dataset, DataLoader, random_split

from torchtext.utils import download_from_url, extract_archive
from torchtext.data.utils import get_tokenizer
from torchtext.vocab import build_vocab_from_iterator

import nlpaug.augmenter.char as nac
import nlpaug.augmenter.word as naw
import nlpaug.augmenter.sentence as nas
import nlpaug.flow as nafc

from nlpaug.util import Action

import random
import gdown

import pandas as pd

from pathlib import Path
from zipfile import ZipFile

from typing import Optional, Tuple, Any, Dict, List

seed_constant = 777
#np.random.seed(seed_constant)
random.seed(seed_constant)

"""# <a >***Text Classification Loading Data, Preprocessing and Splitting***</a>

1. [Loading Data into a dataframe](#1)
2. [Visualize the distribution of classes](#2)
3. [Preprocessing](#3)
4. [Splitting Data Into Train and Validation Datasets](#4)

## <a id="1">**Loading Data into a Dataframe**</a>
"""

df= pd.read_csv('data.csv')

df.columns

df=df[["sentence","label"]]
df.sample(10)

df = df.sample(frac=1).reset_index(drop=True)

df.head()

df.columns

df.sample(10)

df.shape

df.info()

df.describe(include=object)

print(f"There are only {len(df['sentence'].unique())} unique entries in Data")

print(f"There are {len(df['label'].unique())} Classes in the data:\n {list(df['label'].unique())}")

"""
## <a id="2">**Visualize the distribution of classes**</a>"""

df["label"].value_counts()

#

"""
## <a id="3">**Preprocessing**</a>"""

df.dropna(inplace=True)

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install pyspellchecker

REPLACE_BY_SPACE_RE = re.compile('[/(){}\[\]\|@,;]')
BAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')
STOPWORDS = set(stopwords.words('english'))


from spellchecker import SpellChecker

spell = SpellChecker()
def correct_spellings(text):
    corrected_text = []
    misspelled_words = spell.unknown(text.split())
    for word in text.split():
        if word in misspelled_words:
            corrected_text.append(spell.correction(word))
        else:
            corrected_text.append(word)
    return " ".join(corrected_text)

PUNCT_TO_REMOVE = string.punctuation
def remove_punctuation(text):
    """custom function to remove the punctuation"""
    return text.translate(str.maketrans('', '', PUNCT_TO_REMOVE))

def remove_urls(text):
    url_pattern = re.compile(r'https?://\S+|www\.\S+')
    return url_pattern.sub(r'', text)

def remove_html(text):
    html_pattern = re.compile('<.*?>')
    return html_pattern.sub(r'', text)

def remove_emails(text):
  required_output=re.sub(r'[A-Za-z0-9]*@[A-Za-z]*\.?[A-Za-z0-9]*', "", text)
  required_output=" ".join(required_output.split())
  return required_output

def utils_preprocess_text(text, flg_stemm=False, flg_lemm=True, lst_stopwords=None):
    ## clean (convert to lowercase and remove punctuations and  characters and then strip)


    text = text.lower()                                                          # lowercase text
    text = REPLACE_BY_SPACE_RE.sub(' ', text)                                    # replace REPLACE_BY_SPACE_RE symbols by space in text
    text = BAD_SYMBOLS_RE.sub('', text)                                          # delete symbols which are in BAD_SYMBOLS_RE from text
    text = remove_punctuation(text)
    text = remove_urls(text)
    text = remove_html(text)
    text = remove_emails(text)
    ## Tokenize (convert from string to list)
    lst_text = text.split()

    ## remove Stopwords
    if lst_stopwords is not None:
        lst_text = [word for word in lst_text if word not in lst_stopwords]
                
    ## Stemming (remove -ing, -ly, ...)
    if flg_stemm == True:
        ps = nltk.stem.porter.PorterStemmer()
        lst_text = [ps.stem(word) for word in lst_text]
                
    ## Lemmatisation (convert the word into root word)
    if flg_lemm == True:
        lem = nltk.stem.wordnet.WordNetLemmatizer()
        lst_text = [lem.lemmatize(word) for word in lst_text]

    
            
    ## back to string from list
    text = " ".join(lst_text)

    # ## Correct Spelling
    # text = correct_spellings(text)

    return text

df["CleanedText"] = df["sentence"].apply(lambda x: utils_preprocess_text(x, flg_lemm=True, lst_stopwords=STOPWORDS))
df.head()

df['CleanedText'].replace('', inplace=True)

df.info()

df.dropna(inplace=True)

"""# <a >***Text Classification using Transformers Like `Fine Tuning BERT` (Pytorch)***</a>

### **<a>1. Install the Hugging Face Library**
"""

import torch

if torch.cuda.is_available():       
    device = torch.device("cuda")
    print(f'There are {torch.cuda.device_count()} GPU(s) available.')
    print('Device name:', torch.cuda.get_device_name(0))

else:
    print('No GPU available, using the CPU instead.')
    device = torch.device("cpu")

import pandas as pd
import numpy as np
import re
from tensorflow.keras.utils import to_categorical



"""### **<a>2. Tokenization and Input Formatting**

Before tokenizing our text, we will perform some slight processing on our text including removing entity mentions (eg. @united) and some special character. The level of processing here is much less than in previous approachs because BERT was trained with the entire sentences.
"""

df.sample(10)

df["label"].value_counts()

df.dropna(inplace=True)

dfP= df[["CleanedText","label"]]

dfP.head()

dfP.groupby("label").size().plot.bar()

dfP["label"].value_counts()

X=dfP["CleanedText"].values
y=dfP["label"].values

dfP['Label']= dfP['label']

dfP.shape

# Next, we'll split it into training and test
from sklearn.model_selection import train_test_split

X = dfP['CleanedText']
y = dfP['Label']
y= to_categorical(y,2)
# So that we can evaluate how well our model is performing, we split our training data
# into training, validation.

X_train, X_val_test, y_train, y_val_Test = train_test_split(X, y,test_size=0.2,random_state=42,stratify=y)
X_val, X_test, y_val, y_test = train_test_split(X_val_test, y_val_Test,test_size=0.5,random_state=42,stratify=y_val_Test)
print(X_train.shape, X_val.shape,X_test.shape, y_train.shape, y_val.shape, y_test.shape)

"""#### **2.1. BERT Tokenizer**"""

def text_preprocessing(text):
    """
    - Remove entity mentions (eg. '@united')
    - Correct errors (eg. '&amp;' to '&')
    @param    text (str): a string to be processed.
    @return   text (Str): the processed string.
    """
   
    # Remove '@name'
    text = re.sub(r'(@.*?)[\s]', ' ', text)

    # Replace '&amp;' with '&'
    text = re.sub(r'&amp;', '&', text)

    # Remove trailing whitespace
    text = re.sub(r'\s+', ' ', text).strip()

    return text

from transformers import BertTokenizer

# Load the BERT tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)

# Create a function to tokenize a set of texts
def preprocessing_for_bert(data):
    """Perform required preprocessing steps for pretrained BERT.
    @param    data (np.array): Array of texts to be processed.
    @return   input_ids (torch.Tensor): Tensor of token ids to be fed to a model.
    @return   attention_masks (torch.Tensor): Tensor of indices specifying which
                  tokens should be attended to by the model.
    """
    # Create empty lists to store outputs
    input_ids = []
    attention_masks = []

    # For every sentence...
    for sent in data:
        # `encode_plus` will:
        #    (1) Tokenize the sentence
        #    (2) Add the `[CLS]` and `[SEP]` token to the start and end
        #    (3) Truncate/Pad sentence to max length
        #    (4) Map tokens to their IDs
        #    (5) Create attention mask
        #    (6) Return a dictionary of outputs
        encoded_sent = tokenizer.encode_plus(
            text=text_preprocessing(sent),  # Preprocess sentence
            add_special_tokens=True,        # Add `[CLS]` and `[SEP]`
            max_length=MAX_LEN,                  # Max length to truncate/pad
            pad_to_max_length=True,         # Pad sentence to max length
            #return_tensors='pt',           # Return PyTorch tensor
            return_attention_mask=True      # Return attention mask
            )
        
        # Add the outputs to the lists
        input_ids.append(encoded_sent.get('input_ids'))
        attention_masks.append(encoded_sent.get('attention_mask'))

    # Convert lists to tensors
    input_ids = torch.tensor(input_ids)
    attention_masks = torch.tensor(attention_masks)

    return input_ids, attention_masks

"""Before tokenizing, we need to specify the maximum length of our sentences."""

# Find the maximum length
max_len =  df['CleanedText'].apply(lambda x:len(str(x).split())).max()
print('Max length: ', max_len)

"""Now let's tokenize our data."""

# Specify `MAX_LEN`
MAX_LEN = 512

# Print sentence 0 and its encoded token ids
token_ids = list(preprocessing_for_bert([X[0]])[0].squeeze().numpy())
print('Original: ', X[0])
print('Token IDs: ', token_ids)

# Run function `preprocessing_for_bert` on the train set and the validation set
print('Tokenizing data...')
train_inputs, train_masks = preprocessing_for_bert(X_train)
val_inputs,   val_masks   = preprocessing_for_bert(X_val)
test_inputs,  test_masks  = preprocessing_for_bert(X_test)

"""#### **2.2. Create PyTorch DataLoader**

We will create an iterator for our dataset using the torch DataLoader class. 

This will help save on memory during training and boost the training speed.
"""

from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler

# Convert other data types to torch.Tensor
train_labels = torch.tensor(y_train)
val_labels   = torch.tensor(y_val)
test_labels  = torch.tensor(y_test)

# For fine-tuning BERT, the authors recommend a batch size of 16 or 32.
batch_size = 16

# Create the DataLoader for our training set
train_data       = TensorDataset(train_inputs, train_masks, train_labels)
train_sampler    = RandomSampler(train_data)
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)

print(list(RandomSampler(train_data)))

# Create the DataLoader for our validation set
val_data       = TensorDataset(val_inputs, val_masks, val_labels)
val_sampler    = SequentialSampler(val_data)
val_dataloader = DataLoader(val_data, sampler=val_sampler, batch_size=batch_size)

print(list(SequentialSampler(val_data)))

# Create the DataLoader for our validation set
test_data       = TensorDataset(test_inputs, test_masks, test_labels)
test_sampler    = SequentialSampler(test_data)
test_dataloader = DataLoader(test_data, sampler=test_sampler, batch_size=batch_size)

print(list(SequentialSampler(test_data)))

"""### **<a>3. Train and Evaluate Our Model**

#### **3.1. Create BertClassifier**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# import torch
import torch.nn as nn
# from transformers import BertModel
# 
# # Create the BertClassfier class
# class BertClassifier(nn.Module):
#     """Bert Model for Classification Tasks.
#     """
#     def __init__(self, freeze_bert=False):
#         """
#         @param    bert: a BertModel object
#         @param    classifier: a torch.nn.Module classifier
#         @param    freeze_bert (bool): Set `False` to fine-tune the BERT model
#         """
#         super(BertClassifier, self).__init__()
#         # Specify hidden size of BERT, hidden size of our classifier, and number of labels
#         D_in, H, D_out = 768, 50, 2
# 
#         # Instantiate BERT model
#         self.bert = BertModel.from_pretrained('bert-base-uncased')
# 
#         # Instantiate an one-layer feed-forward classifier
#         self.classifier = nn.Sequential(
#             nn.Linear(D_in, H),
#             nn.ReLU(),
#             #nn.Dropout(0.5),
#             nn.Linear(H, D_out)
#         )
# 
#         # Freeze the BERT model
#         # if freeze_bert:
#         #     for param in self.bert.parameters():
#         #         param.requires_grad = False
#         
#     def forward(self, input_ids, attention_mask):
#         """
#         Feed input to BERT and the classifier to compute logits.
#         @param    input_ids (torch.Tensor): an input tensor with shape (batch_size,
#                       max_length)
#         @param    attention_mask (torch.Tensor): a tensor that hold attention mask
#                       information with shape (batch_size, max_length)
#         @return   logits (torch.Tensor): an output tensor with shape (batch_size,
#                       num_labels)
#         """
#         # Feed input to BERT
#         outputs = self.bert(input_ids=input_ids,
#                             attention_mask=attention_mask)
#         
#         # Extract the last hidden state of the token `[CLS]` for classification task
#         last_hidden_state_cls = outputs[0][:, 0, :]
# 
#         # Feed input to classifier to compute logits
#         logits = self.classifier(last_hidden_state_cls)
# 
#         return logits

"""#### **3.2. Optimizer & Learning Rate Scheduler**"""

from transformers import AdamW, get_linear_schedule_with_warmup

def initialize_model(epochs=4):
    """Initialize the Bert Classifier, the optimizer and the learning rate scheduler.
    """
    # Instantiate Bert Classifier
    bert_classifier = BertClassifier(freeze_bert=False)

    # Tell PyTorch to run the model on GPU
    bert_classifier.to(device)

    # Create the optimizer
    optimizer = AdamW(bert_classifier.parameters(),
                      lr=5e-5,    # Default learning rate
                      eps=1e-8    # Default epsilon value
                      )

    # Total number of training steps
    total_steps = len(train_dataloader) * epochs

    # Set up the learning rate scheduler 
    # Which anneals the learning rate from an initial learning rate to some maximum learning rate 
    # and then from that maximum learning rate to some minimum learning rate much lower than the initial learning rate.

    scheduler = get_linear_schedule_with_warmup(optimizer,
                                                num_warmup_steps=0, # Default value
                                                num_training_steps=total_steps)
    return bert_classifier, optimizer, scheduler

"""#### **3.3. Training Loop**"""

import random
import time

# Specify loss function
loss_fn = nn.CrossEntropyLoss()

def set_seed(seed_value=42):
    """Set seed for reproducibility.
    """
    random.seed(seed_value)
    np.random.seed(seed_value)
    torch.manual_seed(seed_value)
    torch.cuda.manual_seed_all(seed_value)

def train(model, train_dataloader, val_dataloader=None, epochs=4, evaluation=False):
    """Train the BertClassifier model.
    """
    # Start training loop
    print("Start training...\n")
    for epoch_i in range(epochs):
        # =======================================
        #               Training
        # =======================================
        # Print the header of the result table
        print(f"{'Epoch':^7} | {'Batch':^7} | {'Train Loss':^12} | {'Val Loss':^10} | {'Val Acc':^9} | {'Elapsed':^9}")
        print("-"*70)

        # Measure the elapsed time of each epoch
        t0_epoch, t0_batch = time.time(), time.time()

        # Reset tracking variables at the beginning of each epoch
        total_loss, batch_loss, batch_counts = 0, 0, 0

        # Put the model into the training mode
        model.train()

        # For each batch of training data...
        for step, batch in enumerate(train_dataloader):
            batch_counts +=1
            # Load batch to GPU
            b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)

            # Zero out any previously calculated gradients
            model.zero_grad()

            # Perform a forward pass. This will return logits.
            logits = model(b_input_ids, b_attn_mask)

            # Compute loss and accumulate the loss values
            loss = loss_fn(logits, b_labels)
            batch_loss += loss.item()
            total_loss += loss.item()

            # Perform a backward pass to calculate gradients
            loss.backward()

           
            # Gradient clipping
            # It forces the gradient values to a specific minimum or maximum value 
            # if the gradient exceeded an expected range. We set a threshold value and 
            # if the gradient is more than that then it is clipped.
            ##
            # It clipping the derivatives of the loss function to have a given value 
            # if a gradient value is less than a negative threshold or more than the positive threshold.
            ##
            # For example, we could specify a norm of 0.5, meaning that 
            # if a gradient value was less than -0.5, it is set to -0.5 and 
            # if it is more than 0.5, then it will be set to 0.5.

            # Clip the norm of the gradients to 1.0 to prevent "exploding gradients"
            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

            # Update parameters and the learning rate

            # optimizer.step() makes the optimizer iterate over all parameters (tensors) 
            # it is supposed to update and use their internally stored grad to update their values.
            optimizer.step()

            # scheduler.step() makes the optimizer iterate over all parameters (tensors) 
            # it is supposed to update and use their internally stored lr to update their values.
            scheduler.step()

            # Print the loss values and time elapsed for every 20 batches
            if (step % 20 == 0 and step != 0) or (step == len(train_dataloader) - 1):
                # Calculate time elapsed for 20 batches
                time_elapsed = time.time() - t0_batch

                # Print training results
                print(f"{epoch_i + 1:^7} | {step:^7} | {batch_loss / batch_counts:^12.6f} | {'-':^10} | {'-':^9} | {time_elapsed:^9.2f}")

                # Reset batch tracking variables
                batch_loss, batch_counts = 0, 0
                t0_batch = time.time()

        # Calculate the average loss over the entire training data
        avg_train_loss = total_loss / len(train_dataloader)

        print("-"*70)
        # =======================================
        #               Evaluation
        # =======================================
        if evaluation == True:
            # After the completion of each training epoch, measure the model's performance
            # on our validation set.
            val_loss, val_accuracy = evaluate(model, val_dataloader)

            # Print performance over the entire training data
            time_elapsed = time.time() - t0_epoch
            
            print(f"{epoch_i + 1:^7} | {'-':^7} | {avg_train_loss:^12.6f} | {val_loss:^10.6f} | {val_accuracy:^9.2f} | {time_elapsed:^9.2f}")
            print("-"*70)
        print("\n")
    
    print("Training complete!")


def evaluate(model, val_dataloader):
    """After the completion of each training epoch, measure the model's performance
    on our validation set.
    """
    # Put the model into the evaluation mode. The dropout layers are disabled during
    # the test time.
    model.eval()

    # Tracking variables
    val_accuracy = []
    val_loss = []

    # For each batch in our validation set...
    for batch in val_dataloader:
        # Load batch to GPU
        b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)

        # Compute logits
        # disabled gradient calculation. Disabling gradient calculation is useful for inference,
        # when you are sure that you will not call Tensor. backward() . # It will reduce memory consumption for computations that would otherwise have requires_grad=True .
        with torch.no_grad():
            logits = model(b_input_ids, b_attn_mask)

        # Compute loss
        loss = loss_fn(logits, b_labels)
        val_loss.append(loss.item())

        # Get the predictions
        preds = torch.argmax(logits, dim=1).flatten()
        b_labels= torch.argmax(b_labels, dim=1).flatten()

        accuracy = (preds == b_labels).cpu().numpy().mean() * 100
        val_accuracy.append(accuracy)

    # Compute the average accuracy and loss over the validation set.
    val_loss = np.mean(val_loss)
    val_accuracy = np.mean(val_accuracy)

    return val_loss, val_accuracy

"""Now, let's start training our BertClassifier!"""

set_seed(42)    # Set seed for reproducibility
bert_classifier, optimizer, scheduler = initialize_model(epochs=5)
train(bert_classifier, train_dataloader, val_dataloader, epochs=5, evaluation=True)

"""#### **3.4 Saving The Best Model**"""

PATH = "bertModel_Stanford_TreeBank.pth"
torch.save(bert_classifier, PATH)

"""#### **3.5 Load The Best Model**"""

# Model class must be defined somewhere
model = torch.load(PATH)
model.eval()

"""#### **3.6. Evaluation on Validation Set**

The prediction step is similar to the evaluation step that we did in the training loop, but simpler. We will perform a forward pass to compute logits and apply softmax to calculate probabilities.
"""

import torch.nn.functional as F

def bert_predict(model, test_dataloader):
    """Perform a forward pass on the trained BERT model to predict probabilities
    on the test set.
    """
    # Put the model into the evaluation mode. The dropout layers are disabled during
    # the test time.
    model.eval()

    all_logits = []

    # For each batch in our test set...
    for batch in test_dataloader:
        # Load batch to GPU
        b_input_ids, b_attn_mask = tuple(t.to(device) for t in batch)[:2]

        # Compute logits
        with torch.no_grad():
            logits = model(b_input_ids, b_attn_mask)
        all_logits.append(logits)
    
    # Concatenate logits from each batch
    all_logits = torch.cat(all_logits, dim=0)

    # Apply softmax to calculate probabilities
    probs = F.softmax(all_logits, dim=1).cpu().numpy()

    return probs

# Commented out IPython magic to ensure Python compatibility.
from sklearn.metrics import accuracy_score, roc_curve, auc
import matplotlib.pyplot as plt
'''
- A custom ROC AUC score function for multi-class classification problem
'''
 
from sklearn.metrics import roc_curve, auc, roc_auc_score
from sklearn.preprocessing import LabelBinarizer
import matplotlib.pyplot as plt
 
def two_class_roc_auc_score(y_test, y_pred, average="macro"):
    lb = LabelBinarizer()
    lb.fit(y_test)
    y_test = lb.transform(y_test)
    y_pred = lb.transform(y_pred)
    return roc_auc_score(y_test, y_pred, average=average)

from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt1
from itertools import cycle
# %matplotlib inline

def plot_roc_cruve(y_test,y_pred,n_classes):
  lb = LabelBinarizer()
  lb.fit(y_test)
  y_test_ = lb.transform(y_test)
  y_pred_ = lb.transform(y_pred)

  # Plot linewidth.
  lw = 2
  n_classes = n_classes-1
  # Compute ROC curve and ROC area for each class
  fpr = dict()
  tpr = dict()
  roc_auc = dict()
  for i in range(n_classes):
      fpr[i], tpr[i], _ = roc_curve(y_test_[: , i], y_pred_[:, i])
      roc_auc[i] = auc(fpr[i], tpr[i])
  
  # Compute micro-average ROC curve and ROC area
  fpr["micro"], tpr["micro"], _ = roc_curve(y_test_.ravel(), y_pred_.ravel())
  roc_auc["micro"] = auc(fpr["micro"], tpr["micro"])

  # Compute macro-average ROC curve and ROC area
  
  # First aggregate all false positive rates
  all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))

  # Then interpolate all ROC curves at this points
  mean_tpr = np.zeros_like(all_fpr)
  for i in range(n_classes):
      mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])


  # Finally average it and compute AUC
  mean_tpr /= n_classes
  
  fpr["macro"] = all_fpr
  tpr["macro"] = mean_tpr
  roc_auc["macro"] = auc(fpr["macro"], tpr["macro"])


  # # Plot all ROC curves
  colors = cycle(['darkorange',"aqua", "cornflowerblue"])
  for i, color in zip(range(n_classes), colors):
      plt1.plot(fpr[i], tpr[i], color=color, lw=lw,
              label='ROC curve of class {0} (area = {1:0.2f})'
              ''.format(i, roc_auc[i]))
  
      plt1.plot([0, 1], [0, 1], 'k--', color=color, lw=lw)
      plt1.xlim([0.0, 1.4])
      plt1.ylim([0.0, 1.05])
      plt1.xlabel('False Positive Rate')
      plt1.ylabel('True Positive Rate')
      plt1.title('ROC of 2-Classes')
      plt1.legend(loc="lower right")
      plt1.gca()
  display(plt1.show())

# Compute predicted probabilities on the test set
preds = bert_predict(model, val_dataloader)

y_val_pred = np.argmax(preds,axis=1)
y_val_true = np.argmax(y_val,axis=1)

"""##### ***`Confusion Matrix`, `Classification Report` and `ROC AUC Curves`***"""

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score, roc_auc_score, auc, roc_curve, precision_recall_curve

import seaborn as sns
sns.set(rc={'figure.figsize':(11.7,8.27)})

confusionMatrix = confusion_matrix(y_val_true, y_val_pred)

ax = sns.heatmap(confusionMatrix, annot=True, cmap='Blues',fmt='g')

ax.set_title('Confusion Matrix with labels\n\n');
ax.set_xlabel('\nPredicted Classes')
ax.set_ylabel('Actual Classes ');


## Display the visualization of the Confusion Matrix.
plt.show()

print(classification_report(y_val_true, y_val_pred ,zero_division=0))

d=(classification_report(y_val_true, y_val_pred ,zero_division=0))

print(d)

print('ROC AUC score:', two_class_roc_auc_score(y_val_true, y_val_pred))

plot_roc_cruve(y_val_true, y_val_pred,2)

"""#### **3.7. Prediction on Test Set**"""

# Run `preprocessing_for_bert` on the test set
print('Tokenizing data...')
test_inputs, test_masks = preprocessing_for_bert(X_test)

# Create the DataLoader for our test set
test_dataset    = TensorDataset(test_inputs, test_masks)
test_sampler    = SequentialSampler(test_dataset)
test_dataloader = DataLoader(test_dataset, sampler=test_sampler, batch_size=16)

preds  = bert_predict(model, test_dataloader)
y_test_pred = np.argmax(preds,axis=1)
y_test_true = np.argmax(y_test,axis=1)

"""##### ***`Confusion Matrix`, `Classification Report` and `ROC AUC Curves`***"""

import seaborn as sns
sns.set(rc={'figure.figsize':(11.7,8.27)})

confusionMatrix = confusion_matrix(y_test_true, y_test_pred)

ax = sns.heatmap(confusionMatrix, annot=True, cmap='Blues',fmt='g')

ax.set_title('Confusion Matrix with labels\n\n');
ax.set_xlabel('\nPredicted Classes')
ax.set_ylabel('Actual Classes ');


## Display the visualization of the Confusion Matrix.
plt.show()

print(classification_report(y_test_true, y_test_pred,zero_division=0))

t=(classification_report(y_test_true, y_test_pred,zero_division=0))

print(t)

print('ROC AUC score:', two_class_roc_auc_score(y_test_true, y_test_pred))

plot_roc_cruve(y_test_true, y_test_pred,2)

"""#### **3.8. Prediction on `SST2` Test Set**"""

data = pd.read_csv('/content/drive/MyDrive/Attention-Based Data Augmentation/test/sst2_test.txt', sep="\t", header=None)

data.columns = ["Label", "sentence"]

data["CleanedText"] = data["sentence"].apply(lambda x: utils_preprocess_text(x, flg_lemm=True, lst_stopwords=STOPWORDS))

X_test2= data["CleanedText"]
y2 = data["Label"]
y_test2= to_categorical(y2,2)

# Run `preprocessing_for_bert` on the test set
print('Tokenizing data...')
test_inputs2, test_masks2 = preprocessing_for_bert(X_test2)

# Create the DataLoader for our test set
test_dataset2    = TensorDataset(test_inputs2, test_masks2)
test_sampler2    = SequentialSampler(test_dataset2)
test_dataloader2 = DataLoader(test_dataset2, sampler=test_sampler2, batch_size=16)

preds2 = bert_predict(model, test_dataloader2)
y_test_pred2 = np.argmax(preds2,axis=1)
y_test_true2 = np.argmax(y_test2,axis=1)

"""##### ***`Confusion Matrix`, `Classification Report` and `ROC AUC Curves`***"""

import seaborn as sns
sns.set(rc={'figure.figsize':(11.7,8.27)})

confusionMatrix = confusion_matrix(y_test_true2, y_test_pred2)

ax = sns.heatmap(confusionMatrix, annot=True, cmap='Blues',fmt='g')

ax.set_title('Confusion Matrix with labels\n\n');
ax.set_xlabel('\nPredicted Classes')
ax.set_ylabel('Actual Classes ');


## Display the visualization of the Confusion Matrix.
plt.show()

print(classification_report(y_test_true2, y_test_pred2,zero_division=0))

t2=(classification_report(y_test_true2, y_test_pred2,zero_division=0))

print(t2)

text = open("./Attn_RNN_SST2_75.txt", "w")
text.write(t2)
text.close()

print('ROC AUC score:', two_class_roc_auc_score(y_test_true2, y_test_pred2))

plot_roc_cruve(y_test_true2, y_test_pred2,2)
